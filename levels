--// Variables //--

local installPath    = "/${installPath}/.lvls"

local logLocation    = installPath .. "/logs"

local viewLocation   = installPath .. "/views"

local assets         = {}
local assetsLocation = installPath .. "/assets"

local logName        = fs.combine(logLocation, (os.day() .. "-" .. textutils.formatTime(os.time()):gsub(" ","-"):gsub(":","-"):lower() .. ".log"))
local logHandle      = fs.open(logName, "a")

local running        = true
local debug          = true

--// BLittle API checker/downloader //--
local ok = os.loadAPI(installPath .. "/blittle")
if not ok then
  printError("BLittle is not installed! This is required to continue")
  printError("Download it to " .. installPath .. "/blittle")
  return
end

--// Functions //--

--/// Logging ///--

local function log( data, level )
  logHandle.writeLine("[" .. (level or "INFO") .. " " .. 
    textutils.formatTime(os.time(),true) .. "] " .. 
    (type(data) == "table" and textutils.serialize(data):gsub("\n%s*","") or tostring(data)))
  logHandle.flush()
end

local function logWarn( data )
  return log( data, "WARN")
end

local function logFatal( data )
  log( data, "FATAL")
  running = false
end

local function logDebug( data )
  if debug then
    return log(data, "DEBUG")
  end
end

--/// File parsing ///--
local function loadAssets()
  --// size: 10
  local sX, sY = term.getSize()
  local function writeCenter(y, text)
    term.setCursorPos(math.ceil(sX/2)-math.floor(#text/2), y)
    term.write( text )
  end
  term.setCursorPos(1,1)
  term.setBackgroundColor(colors.white)
  term.clear()
  paintutils.drawImage(paintutils.loadImage(assetsLocation .. "/logo"), sX/2 - 4, math.floor(sY/2) - 6)
  term.setCursorPos(1,1) --// /127 = weird grid character
  local scan = fs.find(fs.combine(assetsLocation, "*"))
  local barlength = sX - 6
  for k,v in pairs(scan) do
    local tmp1, tmp2 = fs.getName(v):find("%.")
    local name = fs.getName(v):sub(1,tmp2)
    local ext  = ""
    name:gsub(".*%.(.*)",function(_ext) ext = ext_:lower() end)
    log("Loading asset " .. name)
    term.setTextColor(colors.gray)
--    term.setCursorPos(1,math.floor(sY/2)+7) term.clearLine()
    term.setBackgroundColor(colors.white)
    writeCenter(math.floor(sY/2) + 7, "        Loading asset " .. name:sub(1,sX-6) .. "        ")
    local nBar = (k / #scan) * barlength
    local sBar = (" "):rep(math.floor(nBar)) ..
      ("\127"):rep(math.ceil(barlength - nBar))
    term.setCursorPos(1,math.floor(sY/2)+5) term.clearLine()
    term.setBackgroundColor(colors.blue)
    term.setTextColor(colors.white)
    writeCenter(math.floor(sY/2) + 5, sBar)
    if ext == "blit" then
      assets[name] = blittle.load(v)
    else
      assets[name] = blittle.shrink(paintutils.loadImage(v))
    end
  end
end

local function loadView( name )
  name:gsub("(.*)%.level", function(n) name = n end)
  name = name .. ".level"
  if not fs.exists(installPath .. "") then
    logWarn("Map \"" .. name .. "\"does not exist.")
    return false, "Map does not exist."
  end
  
  return true
end

--/// Event hooking ///--

local eventHandles     = {}
local eventHandleIndex = {}
local eventID          = 0

local function removeHandles()
  eventHandles = {}
  eventHandleIndex = {}
  eventID = {}
end

local function handleEvent( event, callback )
  eventID = eventID + 1
  eventHandles[event] = eventHandles[event] or {}
  eventHandleIndex[event] = eventHandleIndex[event] or {}
  eventHandleIndex[event][eventID] = callback
  eventHandles[event][eventID] = callback
  return eventID
end

local function parseEvent( ... )
  for event, eventIDs in pairs(eventHandles) do
    for eventID, callback in pairs(eventIDs) do
      local ok, err = pcall(callback, ... )
      if not ok then
        logWarn( err )
      end
    end
  end
end

local function eventLoop()
  while true do
    parseEvent( coroutine.yield() )
  end
end


--// Game code //--

local ok, err = pcall(parallel.waitForAny, eventLoop, function()
  log("Loading assets...")
  loadAssets()
end)

if not ok then
  logFatal(err)
  printError("Uh oh! A fatal exception has occured.")
  printError("Please send " .. logName .. " to the creator.")
  if debug then
    printError(err)
  end
else
  log("Successfully closed")
end

logHandle.close()
